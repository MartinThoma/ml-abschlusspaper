% This file was created with JabRef 2.10.
% Encoding: UTF-8


@Misc{Bastien2012,
  Title                    = {Theano: new features and speed improvements},

  Author                   = {Bastien, Fr{\'{e}}d{\'{e}}ric and Lamblin, Pascal and Pascanu, Razvan and Bergstra, James and Goodfellow, Ian J. and Bergeron, Arnaud and Bouchard, Nicolas and Bengio, Yoshua},
  HowPublished             = {Deep Learning and Unsupervised Feature Learning NIPS 2012 Workshop},
  Year                     = {2012},

  Abstract                 = {Theano is a linear algebra compiler that optimizes a user’s symbolically-speciﬁed
mathematical computations to produce efﬁcient low-level implementations. In
this paper, we present new features and efﬁciency improvements to Theano, and
benchmarks demonstrating Theano’s performance relative to Torch7, a recently
introduced machine learning library, and to RNNLM, a C++ library targeted at
recurrent neural networks.},
  Owner                    = {Martin Thoma},
  Timestamp                = {2015.07.23}
}

@InProceedings{Bergstra2010,
  Title                    = {Theano: a {CPU} and {GPU} Math Expression Compiler},
  Author                   = {Bergstra, James and Breuleux, Olivier and Bastien, Fr{\'{e}}d{\'{e}}ric and Lamblin, Pascal and Pascanu, Razvan and Desjardins, Guillaume and Turian, Joseph and Warde-Farley, David and Bengio, Yoshua},
  Booktitle                = {Proceedings of the Python for Scientific Computing Conference ({SciPy})},
  Year                     = {2010},
  Month                    = jun,
  Note                     = {Oral Presentation},
  Abstract                 = {Theano is a compiler for mathematical expressions in Python that combines the convenience of NumPy’s syntax with the speed of optimized native machine language. The user composes mathematical expressions in a high-level description that mimics NumPy’s syntax and semantics, while being statically typed and
functional (as opposed to imperative). These expressions allow Theano to provide symbolic differentiation. Before performing computation, Theano optimizes the choice of expressions, translates
them into C++ (or CUDA for GPU), compiles them into dynamically loaded Python modules, all automatically. Common machine learning algorithms implemented with Theano are from 1.6× to 7.5× faster than competitive alternatives (including those implemented with C/C++, NumPy/SciPy and MATLAB) when compiled for the
CPU and between 6.5× and 44× faster when compiled for the GPU. This paper illustrates how to use Theano, outlines the scope of the compiler, provides benchmarks on both CPU and GPU processors, and explains its overall design.},
  Location                 = {Austin, TX},
  Owner                    = {Martin Thoma},
  Timestamp                = {2015.07.23}
}

@InProceedings{Fritsch2013,
  Title                    = {A New Performance Measure and Evaluation Benchmark for Road Detection Algorithms},
  Author                   = {Jannik Fritsch and Tobias Kuehnl and Andreas Geiger},
  Booktitle                = {International Conference on Intelligent Transportation Systems (ITSC)},
  Year                     = {2013},

  Owner                    = {Martin Thoma},
  Timestamp                = {2015.07.23}
}

@Article{Jia2014,
  Title                    = {Caffe: Convolutional Architecture for Fast Feature Embedding},
  Author                   = {Jia, Yangqing and Shelhamer, Evan and Donahue, Jeff and Karayev, Sergey and Long, Jonathan and Girshick, Ross and Guadarrama, Sergio and Darrell, Trevor},
  Journal                  = {arXiv preprint arXiv:1408.5093},
  Year                     = {2014},

  Owner                    = {Martin Thoma},
  Timestamp                = {2015.07.23}
}

